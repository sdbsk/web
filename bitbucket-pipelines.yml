pipelines:
    branches:
        main:
            -   step:
                    image: php:8.1-alpine
                    name: 'Install php dependencies'
                    caches:
                        - composer
                    artifacts:
                        - vendor/google/material-symbols/svg/300/outlined/**
                    script:
                        - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
                        - COMPOSER_ALLOW_SUPERUSER=1 composer install
            -   step:
                    image: node:20-alpine
                    clone:
                        depth: full
                    name: 'Build & release assets'
                    caches:
                        - composer
                        - node
                    script:
                        - npm i && npm run prod
                        - echo "Build ${BITBUCKET_BUILD_NUMBER}"
                        - git fetch --all
                        - git branch --all
                        - git checkout -b release
                        - git branch -u origin/release
                        - sed '/^\/web\/app\/themes\/saleziani\/assets$/d' .gitignore > .gitignore2 && mv .gitignore2 .gitignore
                        - git add --all
                        - git commit -m "Release ${BITBUCKET_BUILD_NUMBER}"
                        - git push origin release --force
#        release:

#      - step:
#          name: 'Lint'
#          script:
#            - echo "Your linting goes here..."
#      - step:
#          name: 'Security scan'
#          script:
#            - echo "Your security scan goes here..."
#
#    # The following deployment steps will be executed for each pipeline run. To configure your steps and conditionally deploy see https://support.atlassian.com/bitbucket-cloud/docs/configure-bitbucket-pipelinesyml/
#    - step:
#        name: 'Deployment to Staging'
#        deployment: staging
#        script:
#          - echo "Your deployment to staging script goes here..."
#    - step:
#        name: 'Deployment to Production'
#        deployment: production
#        trigger: 'manual'
#        script:
#          - echo "Your deployment to production script goes here..."
